(define (fact n)
  (let ((count 0)
        (prod 1))
    (define (helper)
        (cond ((= count n) 0)
              (else
               (set! count (+ count 1))
               (set! prod (* prod count))
               (helper))))
    (begin (helper)
           prod)))

;; This is the example code in the assignment. 
(define (new-account initial-balance)
  (let ((balance initial-balance)
        (rate 0.01))
    (define (deposit f)
      (set! balance (+ balance f)) balance)
    (define (withdraw f)
      (cond ((> f balance)(display Withdrawal not allowed since balance is 'balance))
            (else
             (set! balance (- balance f)) balance)))
    (define (setrate r) (set! rate r) rate)
    (define (accrue) (set! balance (* balance (+ 1 rate))) balance)
    (define (bal-inq) balance)
    (lambda (method)
      (cond ((eq? method 'deposit) deposit)
            ((eq? method 'withdraw) withdraw)
            ((eq? method 'setrate) setrate)
            ((eq? method 'accrue) accrue)
            ((eq? method 'balance-inquire) bal-inq)))))